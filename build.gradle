buildscript {
    apply from: "$rootProject.projectDir/common.gradle"
    ext.versions = [
            // Android
            'compileSdk': 26,
            'buildTools': '26.0.2',
            'minSdk': 16,
            'targetSdk': 26,

            // Plugins
            'androidGradlePlugin': '3.0.0',
            'googleServices': '3.1.0',
            'firebasePlugin': '1.1.0-alpha1',
            'gradleHockeyPlugin': '3.6',

            // Java
            'java': JavaVersion.VERSION_1_7,

            // Dependencies
            'videoCpp': '1.3.1',
            'junit': '4.12',
            'mockito': '1.10.19',
            'guava': '19.0',
            'retrofit': '1.9.0',
            'supportLibrary': '26.1.0',
            'espresso': '3.0.0',
            'testSupportLibrary': '1.0.0',
            'uiAutomator': '2.1.2',
            'gson': '2.7',
            'apacheCommons': '3.6',
            'junitRetryRule': 'master',
            'junitParams': '1.1.1',
            'relinker': '1.2.2',
            'jjwt': '0.7.0',
            'hockey': '3.5.0',
            'timber': '4.1.0',
            'materialrangebar': '1.3',
            'butterknife': '8.4.0',
            'multidex': '1.0.1',
            'firebase': '10.0.1',
            'playServices': '10.0.1',
            'dagger': '2.10',
            'rxJava2': '2.0.6',
            'rxJava2Adapter': '1.0.0',
            'rxAndroid2': '2.0.1',
            'retrofit2': '2.1.0'
    ]
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url  "https://twilio.bintray.com/releases"
        }
        maven {
            url  "https://twilio.bintray.com/internal-releases"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
        maven {
            url  "https://twilio.bintray.com/snapshots"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
        classpath "com.jakewharton:butterknife-gradle-plugin:${versions.butterknife}"
        classpath "com.google.gms:google-services:${versions.googleServices}"
        classpath ("com.google.firebase:firebase-plugins:${versions.firebasePlugin}") {
            exclude group: 'com.google.guava', module: 'guava-jdk5'
        }
        classpath "de.felixschulze.gradle:gradle-hockeyapp-plugin:${versions.gradleHockeyPlugin}"
    }
}

allprojects {
    apply from: "$rootProject.projectDir/common.gradle"
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url  "https://twilio.bintray.com/releases"
        }
        maven {
            url  "https://twilio.bintray.com/internal-releases"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
        maven {
            url  "https://twilio.bintray.com/snapshots"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
        maven {
            url 'https://jitpack.io'
        }
    }
}

task tagReleaseCandidate {
    description = 'Tag commit as release candidate'
    group = 'Git'

    doLast {
        def rcTag = "${versionMajor}.${versionMinor}.${versionPatch}-rc${versionRc}"
        def rcTagPath = "tags/${rcTag}"
        exec {
            workingDir "${rootDir}"
            commandLine "git", "tag", "-a", "${rcTag}", "-m", "\"${rcTag} release candidate\""
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "origin", "${rcTagPath}"
        }
    }
}

task tagRelease {
    description = 'Tag commit as release'
    group = 'Git'

    doLast {
        // TODO: Add support for releasing any RC. Currently only releases last RC.
        def rcTag = "${versionMajor}.${versionMinor}.${versionPatch}-rc${versionRc - 1}"
        def releaseVersion = System.getenv("RELEASE_VERSION")
        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${rcTag}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git",
                    "tag",
                    "-a",
                    "${releaseVersion}",
                    "-m",
                    "\"${releaseVersion} release\""
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "origin", "${releaseVersion}"
        }
    }
}

task validateReleaseCandidateTag {
    description = 'Validate the release candidate tag matches the release candidate version ' +
            'present on commit'
    group = 'Git'

    doLast {
        def travisTag = System.getenv("TRAVIS_TAG")
        def tagsMatch = (matchesRcVersion(travisTag)) ? ("true") : ("false")

        exec {
            workingDir "${rootDir}"
            commandLine tagsMatch
        }
    }
}

task validateReleaseTag {
    description = 'Validate the release tag matches the release version ' +
            'present on commit'
    group = 'Git'

    doLast {
        def travisTag = System.getenv("TRAVIS_TAG")
        def tagsMatch = (matchesVersion(travisTag)) ? ("true") : ("false")

        exec {
            workingDir "${rootDir}"
            commandLine tagsMatch
        }
    }
}

task incrementRc {
    description = 'Increment the current release candidate version'
    group = 'Git'

    dependsOn 'validateReleaseCandidateTag'

    doLast {
        /*
         * Travis CI is in detached head when this task executes. Use the current version to
         * determine what branch to increment the RC on.
         */
        def gitBranch = (versionMajor == 1) ? ("master") : ("2.0")
        def travisTag = System.getenv("TRAVIS_TAG")
        def githubToken = System.getenv("GITHUB_TOKEN")
        def repoSlug = System.getenv("TRAVIS_REPO_SLUG")
        def gitRef = "https://${githubToken}@github.com/${repoSlug}.git"
        def remote = "upstream"
        def pushNullFile = new FileOutputStream("/dev/null")
        def nextVersionRc = "${versionRc + 1}"
        // Create build directory if not created
        if (!buildDir.exists()) {
            buildDir.mkdir()
        }
        def tmpProjectPropertiesFile = new FileOutputStream("${buildDir}/gradle.properties")

        exec {
            workingDir "${rootDir}"
            commandLine "git", "remote", "add", "${remote}", "${gitRef}"
            // Ignore exit value because remote may have been added in previous task
            ignoreExitValue true
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "fetch", "${remote}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${gitBranch}"
        }

        /*
         * Only update the RC version on upstream branch if the version matches tag. It is possible
         * these values do not match if an RC job is performed on an earlier commit and a PR
         * with a version update occurs later in history.
         */
        if (matchesRcVersion(travisTag)) {
            exec {
                workingDir "${rootDir}"
                commandLine "echo", "Incrementing RC from ${versionRc} to ${nextVersionRc}"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "sed",
                        "s@versionRc=.*@versionRc=${nextVersionRc}@",
                        "gradle.properties"
                standardOutput tmpProjectPropertiesFile
            }

            exec {
                workingDir "${rootDir}"
                commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "git", "commit", "gradle.properties", "-m", "\"Bump RC version [skip ci]\""
            }

            exec {
                workingDir "${rootDir}"
                commandLine "git", "push", "--quiet", "${remote}", "${gitBranch}"
                standardOutput pushNullFile
            }
        }
    }
}

task incrementVersionAfterRelease {
    description = 'Increment the SDK version after a release'
    group = 'Git'

    doLast {
        /*
         * Travis CI is in detached head when this task executes. Use the current version to
         * determine what branch to increment the version on.
         */
        def gitBranch = (versionMajor == 1) ? ("master") : ("2.0")
        def travisTag = System.getenv("TRAVIS_TAG")
        def githubToken = System.getenv("GITHUB_TOKEN")
        def repoSlug = System.getenv("TRAVIS_REPO_SLUG")
        def gitRef = "https://${githubToken}@github.com/${repoSlug}.git"
        def remote = "upstream"
        def pushNullFile = new FileOutputStream("/dev/null")
        def nextVersionPatch = versionPatch + 1
        // Create build directory if not created
        if (!buildDir.exists()) {
            buildDir.mkdir()
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "remote", "add", "${remote}", "${gitRef}"
            // Ignore exit value because remote may have been added in previous task
            ignoreExitValue true
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "fetch", "${remote}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${gitBranch}"
        }

        /*
         * Only update the version on upstream branch if the version matches tag. It is possible
         * these values do not match if a job is performed on an earlier commit and a PR
         * with a version update occurs later in history.
         */
        if (matchesVersion(travisTag)) {
            exec {
                workingDir "${rootDir}"
                commandLine "echo", "Incrementing from versionPatch ${versionPatch} to " +
                        "${nextVersionPatch}"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "sed",
                        "s@versionPatch=.*@versionPatch=${nextVersionPatch}@",
                        "gradle.properties"
                standardOutput new FileOutputStream("${buildDir}/gradle.properties")
            }

            exec {
                workingDir "${rootDir}"
                commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "echo", "Resetting versionRc to 1"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "sed",
                        "s@versionRc=.*@versionRc=1@",
                        "gradle.properties"
                standardOutput new FileOutputStream("${buildDir}/gradle.properties")
            }

            exec {
                workingDir "${rootDir}"
                commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "echo", "Resetting phaseNumber to 1"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "sed",
                        "s@phaseNumber=.*@phaseNumber=1@",
                        "gradle.properties"
                standardOutput new FileOutputStream("${buildDir}/gradle.properties")
            }

            exec {
                workingDir "${rootDir}"
                commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "git", "commit", "gradle.properties", "-m", "\"Bump patch and reset rc version [skip ci]\""
            }

            exec {
                workingDir "${rootDir}"
                commandLine "git", "push", "--quiet", "${remote}", "${gitBranch}"
                standardOutput pushNullFile
            }
        }
    }
}

task incrementVersionAfterPreRelease {
    description = 'Increment the SDK version after a pre-release'
    group = 'Git'

    doLast {
        /*
         * Travis CI is in detached head when this task executes. Use the current version to
         * determine what branch to increment the version on.
         */
        def gitBranch = (versionMajor == 1) ? ("master") : ("2.0")
        def travisTag = System.getenv("TRAVIS_TAG")
        def githubToken = System.getenv("GITHUB_TOKEN")
        def repoSlug = System.getenv("TRAVIS_REPO_SLUG")
        def gitRef = "https://${githubToken}@github.com/${repoSlug}.git"
        def remote = "upstream"
        def pushNullFile = new FileOutputStream("/dev/null")
        def nextPhaseNumber = phaseNumber + 1
        // Create build directory if not created
        if (!buildDir.exists()) {
            buildDir.mkdir()
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "remote", "add", "${remote}", "${gitRef}"
            // Ignore exit value because remote may have been added in previous task
            ignoreExitValue true
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "fetch", "${remote}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${gitBranch}"
        }

        /*
         * Only update the phase on upstream branch if the version matches tag. It is possible
         * these values do not match if a job is performed on an earlier commit and a PR
         * with a version update occurs later in history.
         */
        if (matchesVersion(travisTag)) {
            exec {
                workingDir "${rootDir}"
                commandLine "echo", "Incrementing from phaseNumber ${phaseNumber} to " +
                        "${nextPhaseNumber}"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "sed",
                        "s@phaseNumber=.*@phaseNumber=${nextPhaseNumber}@",
                        "gradle.properties"
                standardOutput new FileOutputStream("${buildDir}/gradle.properties")
            }

            exec {
                workingDir "${rootDir}"
                commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
            }

            exec {
                workingDir "${rootDir}"
                commandLine "git", "commit", "gradle.properties", "-m", "\"Bump phase number [skip ci]\""
            }

            exec {
                workingDir "${rootDir}"
                commandLine "git", "push", "--quiet", "${remote}", "${gitBranch}"
                standardOutput pushNullFile
            }
        }
    }
}

task incrementVersion(type: GradleBuild) {
    description = 'Increment the SDK version'
    group = 'Git'
    dependsOn validateReleaseTag
    def releaseVersion = System.getenv("TRAVIS_TAG") == null ?
            ("") :
            (System.getenv("TRAVIS_TAG"))
    def incrementVersionTask = releaseVersion.contains("preview") ||
            releaseVersion.contains("beta") ?
            ('incrementVersionAfterPreRelease') :
            ('incrementVersionAfterRelease')
    tasks = [incrementVersionTask]
}

task checkoutRelease(type: Exec) {
    description = 'Checkout tagged release'
    group = 'Git'
    def releaseVersion = System.getenv("RELEASE_VERSION")
    commandLine "git", "checkout", "${releaseVersion}"
}

task publishLibraryJavadocs {
    description = 'Publish Video Android Javadocs to gh-pages branch'
    group = 'Publishing'
    dependsOn validateReleaseTag
    dependsOn 'library:createJavadocs'
    def releaseVersion = System.getenv("TRAVIS_TAG") == null ?
            ("") :
            (System.getenv("TRAVIS_TAG"))
    boolean preRelease = releaseVersion.contains("preview") || releaseVersion.contains("beta")
    def pinLatestDocsCommand = preRelease ?
            // Pin command is a no-op for pre releases
            (["true"]) :
            (["ln", "-sfn", "${releaseVersion}", "docs/latest"])
    def githubToken = System.getenv("GITHUB_TOKEN")
    def repoSlug = System.getenv("TRAVIS_REPO_SLUG")
    def gitRef = "https://${githubToken}@github.com/${repoSlug}.git"
    def remote = "upstream"
    def pushNullFile = new FileOutputStream("/dev/null")

    doLast {
        exec {
            workingDir "${rootDir}"
            commandLine "git", "remote", "add", "${remote}", "${gitRef}"
            // Ignore exit value because remote may have been added in previous task
            ignoreExitValue true
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "fetch", "${remote}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "gh-pages"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "mv", "library/build/docs/javadoc", "docs/${releaseVersion}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine pinLatestDocsCommand
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "add", "docs/${releaseVersion}", "docs/latest"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "commit", "-m", "\"${releaseVersion} release docs [skip ci]\""
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "--quiet", "${remote}", "gh-pages"
            standardOutput pushNullFile
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${releaseVersion}"
        }
    }
}

task firebaseTestLabCheckLibrary(type: Exec) {
    description = 'Runs library instrumentation tests on Firebase Test Lab'
    group = 'Test'
    dependsOn 'library:assembleDebugAndroidTest'
    dependsOn 'app:assembleDebug'
    commandLine 'gcloud',
            'firebase',
            'test',
            'android',
            'run',
            '--project',
            'video-app-79418',
            'video-app-args.yaml:library-instrumentation-tests'
}

task firebaseTestLabCheckLibraryCamera(type: Exec) {
    description = 'Runs library instrumentation tests that use camera on Firebase Test Lab'
    group = 'Test'
    dependsOn 'library:assembleDebugAndroidTest'
    dependsOn 'app:assembleDebug'
    commandLine 'gcloud',
            'firebase',
            'test',
            'android',
            'run',
            '--project',
            'video-app-79418',
            '--async',
            'video-app-args.yaml:library-camera-tests'
}

task checkLibrary(type: GradleBuild) {
    description = 'Runs all tests and checks for the library'
    group = 'Test'
    tasks = [
            'clean',
            'assemble',
            'library:testDebugUnitTest',
            'firebaseTestLabCheckLibrary',
            'firebaseTestLabCheckLibraryCamera'
    ]
}

task bintrayLibrarySnapshotUpload(type: GradleBuild) {
    description = 'Publish Video Android AAR snapshot to Bintray'
    group = 'Publishing'
    buildFile = file('library/build.gradle')
    tasks = ['clean', 'assemble', 'uploadArchives']
    startParameter.projectProperties += gradle.startParameter.projectProperties + [
            'snapshot': true,
            'maven.repo': 'https://api.bintray.com/maven/twilio/snapshots/video-android/;publish=1',
            'maven.username': "${getBintrayUsername()}",
            'maven.password': "${getBintrayPassword()}"
    ]
}

task bintrayLibraryReleaseCandidateUpload(type: GradleBuild) {
    description = 'Publish Video Android AAR release candidate to internal Bintray'
    group = 'Publishing'
    dependsOn 'validateReleaseCandidateTag'
    buildFile = file('library/build.gradle')
    tasks = ['clean', 'assemble', 'uploadArchives']
    startParameter.projectProperties += gradle.startParameter.projectProperties + [
            'releaseCandidate': true,
            'maven.repo': 'https://api.bintray.com/maven/twilio/internal-releases/video-android/;publish=1',
            'maven.username': "${getBintrayUsername()}",
            'maven.password': "${getBintrayPassword()}"
    ]
}

task bintrayLibraryReleaseUpload(type: GradleBuild) {
    description = 'Publish Video Android AAR to release Bintray'
    group = 'Publishing'
    dependsOn validateReleaseTag
    buildFile = file('library/build.gradle')
    tasks = ['clean', 'assemble', 'uploadArchives']
    def releaseVersion = System.getenv("TRAVIS_TAG") == null ?
            ("") :
            (System.getenv("TRAVIS_TAG"))
    boolean preRelease = releaseVersion.contains("preview") || releaseVersion.contains("beta")
    startParameter.projectProperties += gradle.startParameter.projectProperties + [
            'preRelease': preRelease,
            'maven.repo': 'https://api.bintray.com/maven/twilio/releases/video-android/;publish=1',
            'maven.username': "${getBintrayUsername()}",
            'maven.password': "${getBintrayPassword()}"
    ]
}

/*
 * Checks if a RC tag matches version and RC of current commit
 */
def matchesRcVersion(versionTag) {
    def properties = new Properties()
    file("${rootDir}/gradle.properties").withInputStream { properties.load(it) }
    def rcTag = "${properties.getProperty("versionMajor")}." +
            "${properties.getProperty("versionMinor")}." +
            "${properties.getProperty("versionPatch")}-" +
            "rc${properties.getProperty("versionRc")}"

    return rcTag == versionTag
}

/*
 * Checks if release tag matches version and current commit
 */
def matchesVersion(versionTag) {
    def properties = new Properties()
    boolean preRelease = versionTag.contains("preview") || versionTag.contains("beta")
    file("${rootDir}/gradle.properties").withInputStream { properties.load(it) }
    def releaseTag = "${properties.getProperty("versionMajor")}." +
            "${properties.getProperty("versionMinor")}." +
            "${properties.getProperty("versionPatch")}"

    if (preRelease) {
        releaseTag += "-${properties.getProperty("phase").replaceAll("\"", "")}" +
                "${properties.getProperty("phaseNumber")}"
    }

    return releaseTag == versionTag
}
