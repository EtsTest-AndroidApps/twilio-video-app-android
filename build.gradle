buildscript {
    apply from: "$rootProject.projectDir/common.gradle"
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url  "https://twilio.bintray.com/releases"
        }
        maven {
            url  "https://twilio.bintray.com/internal-releases"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
        maven {
            url  "https://twilio.bintray.com/snapshots"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0'
        classpath 'com.google.gms:google-services:3.1.0'
        classpath ('com.google.firebase:firebase-plugins:1.1.0-alpha1') {
            exclude group: 'com.google.guava', module: 'guava-jdk5'
        }
        classpath 'de.felixschulze.gradle:gradle-hockeyapp-plugin:3.6'
    }
}

allprojects {
    apply from: "$rootProject.projectDir/common.gradle"
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url  "https://twilio.bintray.com/releases"
        }
        maven {
            url  "https://twilio.bintray.com/internal-releases"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
        maven {
            url  "https://twilio.bintray.com/snapshots"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
        maven {
            url 'https://jitpack.io'
        }
    }
}

task tagReleaseCandidate {
    description = 'Tag commit as release candidate'
    group = 'Git'

    doLast {
        def rcTag = "${versionMajor}.${versionMinor}.${versionPatch}-rc${versionRc}"
        def rcTagPath = "tags/${rcTag}"
        exec {
            workingDir "${rootDir}"
            commandLine "git", "tag", "-a", "${rcTag}", "-m", "\"${rcTag} release candidate\""
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "origin", "${rcTagPath}"
        }
    }
}

task tagRelease {
    description = 'Tag commit as release'
    group = 'Git'

    doLast {
        // TODO: Add support for releasing any RC. Currently only releases last RC.
        def rcTag = "${versionMajor}.${versionMinor}.${versionPatch}-rc${versionRc - 1}"
        def releaseVersion = System.getenv("RELEASE_VERSION")
        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${rcTag}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git",
                    "tag",
                    "-a",
                    "${releaseVersion}",
                    "-m",
                    "\"${releaseVersion} release\""
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "origin", "${releaseVersion}"
        }
    }
}

task incrementRc {
    description = 'Increment the current release candidate version'
    group = 'Git'

    doLast {
        def gitBranch = System.getenv("GIT_BRANCH")
        def nextVersionRc = "${versionRc + 1}"
        // Create build directory if not created
        if (!buildDir.exists()) {
            buildDir.mkdir()
        }
        def tmpProjectPropertiesFile = new FileOutputStream("${buildDir}/gradle.properties")
        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${gitBranch}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "echo", "Incrementing RC from ${versionRc} to ${nextVersionRc}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "sed",
                    "s@versionRc=.*@versionRc=${nextVersionRc}@",
                    "gradle.properties"
            standardOutput tmpProjectPropertiesFile
        }

        exec {
            workingDir "${rootDir}"
            commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "commit", "gradle.properties", "-m", "\"Bump RC version\""
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "origin", "${gitBranch}"
        }
    }
}

task incrementVersionAfterRelease {
    description = 'Increment the SDK version after a release'
    group = 'Git'

    doLast {
        def gitBranch = System.getenv("GIT_BRANCH")
        def nextVersionPatch = versionPatch + 1
        // Create build directory if not created
        if (!buildDir.exists()) {
            buildDir.mkdir()
        }
        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${gitBranch}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "echo", "Incrementing from versionPatch ${versionPatch} to " +
                    "${nextVersionPatch}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "sed",
                    "s@versionPatch=.*@versionPatch=${nextVersionPatch}@",
                    "gradle.properties"
            standardOutput new FileOutputStream("${buildDir}/gradle.properties")
        }

        exec {
            workingDir "${rootDir}"
            commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "echo", "Resetting versionRc to 1"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "sed",
                    "s@versionRc=.*@versionRc=1@",
                    "gradle.properties"
            standardOutput new FileOutputStream("${buildDir}/gradle.properties")
        }

        exec {
            workingDir "${rootDir}"
            commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "echo", "Resetting phaseNumber to 1"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "sed",
                    "s@phaseNumber=.*@phaseNumber=1@",
                    "gradle.properties"
            standardOutput new FileOutputStream("${buildDir}/gradle.properties")
        }

        exec {
            workingDir "${rootDir}"
            commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "commit", "gradle.properties", "-m", "\"Bump patch and reset rc version\""
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "origin", "${gitBranch}"
        }
    }
}

task incrementVersionAfterPreRelease {
    description = 'Increment the SDK version after a pre-release'
    group = 'Git'

    doLast {
        def gitBranch = System.getenv("GIT_BRANCH")
        def nextPhaseNumber = phaseNumber + 1
        // Create build directory if not created
        if (!buildDir.exists()) {
            buildDir.mkdir()
        }
        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${gitBranch}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "echo", "Incrementing from phaseNumber ${phaseNumber} to " +
                    "${nextPhaseNumber}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "sed",
                    "s@phaseNumber=.*@phaseNumber=${nextPhaseNumber}@",
                    "gradle.properties"
            standardOutput new FileOutputStream("${buildDir}/gradle.properties")
        }

        exec {
            workingDir "${rootDir}"
            commandLine "mv", "${buildDir}/gradle.properties", "gradle.properties"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "commit", "gradle.properties", "-m", "\"Bump phase number\""
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "origin", "${gitBranch}"
        }
    }
}

task incrementVersion(type: GradleBuild) {
    description = 'Increment the SDK version'
    group = 'Git'
    def releaseVersion = System.getenv("RELEASE_VERSION") == null ?
            ("") :
            (System.getenv("RELEASE_VERSION"))
    def incrementVersionTask = releaseVersion.contains("preview") ||
            releaseVersion.contains("beta") ?
            ('incrementVersionAfterPreRelease') :
            ('incrementVersionAfterRelease')
    tasks = [incrementVersionTask]
}

task checkoutRelease(type: Exec) {
    description = 'Checkout tagged release'
    group = 'Git'
    def releaseVersion = System.getenv("RELEASE_VERSION")
    commandLine "git", "checkout", "${releaseVersion}"
}

task publishLibraryJavadocs {
    description = 'Publish Video Android Javadocs to gh-pages branch'
    group = 'Publishing'
    dependsOn 'checkoutRelease'
    dependsOn 'library:createJavadocs'
    def gitBranch = System.getenv("GIT_BRANCH")
    def releaseVersion = System.getenv("RELEASE_VERSION") == null ?
            ("") :
            (System.getenv("RELEASE_VERSION"))
    boolean preRelease = releaseVersion.contains("preview") || releaseVersion.contains("beta")
    def pinLatestDocsCommand = preRelease ?
            // Pin command is a no-op for pre releases
            (["true"]) :
            (["ln", "-sfn", "${releaseVersion}", "docs/latest"])

    doLast {
        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "gh-pages"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "mv", "library/build/docs/javadoc", "docs/${releaseVersion}"
        }

        exec {
            workingDir "${rootDir}"
            commandLine pinLatestDocsCommand
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "add", "docs/${releaseVersion}", "docs/latest"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "commit", "-m", "\"${releaseVersion} release docs\""
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "origin", "gh-pages"
        }

        // TODO: Remove once source has moved to Github permanently
        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "git@github.com:twilio/twilio-video-android.git", "gh-pages"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "checkout", "${gitBranch}"
        }
    }
}

task firebaseTestLabCheckLibrary(type: Exec) {
    description = 'Runs library instrumentation tests on Firebase Test Lab'
    group = 'Test'
    dependsOn 'library:assembleDebugAndroidTest'
    dependsOn 'app:assembleDebug'
    commandLine 'gcloud',
            'firebase',
            'test',
            'android',
            'run',
            '--project',
            'video-app-79418',
            'video-app-args.yaml:library-instrumentation-tests'
}

task firebaseTestLabCheckLibraryCamera(type: Exec) {
    description = 'Runs library instrumentation tests that use camera on Firebase Test Lab'
    group = 'Test'
    dependsOn 'library:assembleDebugAndroidTest'
    dependsOn 'app:assembleDebug'
    commandLine 'gcloud',
            'firebase',
            'test',
            'android',
            'run',
            '--project',
            'video-app-79418',
            '--async',
            'video-app-args.yaml:library-camera-tests'
}

task checkLibrary(type: GradleBuild) {
    description = 'Runs all tests and checks for the library'
    group = 'Test'
    tasks = [
            'clean',
            'assemble',
            'library:testDebugUnitTest',
            'firebaseTestLabCheckLibrary',
            'firebaseTestLabCheckLibraryCamera'
    ]
}

task bintrayLibrarySnapshotUpload(type: GradleBuild) {
    description = 'Publish Video Android AAR snapshot to Bintray'
    group = 'Publishing'
    buildFile = file('library/build.gradle')
    tasks = ['clean', 'assemble', 'uploadArchives']
    startParameter.projectProperties += gradle.startParameter.projectProperties + [
            'snapshot': true,
            'maven.repo': 'https://api.bintray.com/maven/twilio/snapshots/video-android/;publish=1',
            'maven.username': "${getBintrayUsername()}",
            'maven.password': "${getBintrayPassword()}"
    ]
}

task bintrayLibraryReleaseCandidateUpload(type: GradleBuild) {
    description = 'Publish Video Android AAR release candidate to internal Bintray'
    group = 'Publishing'
    buildFile = file('library/build.gradle')
    tasks = ['clean', 'assemble', 'uploadArchives']
    startParameter.projectProperties += gradle.startParameter.projectProperties + [
            'releaseCandidate': true,
            'maven.repo': 'https://api.bintray.com/maven/twilio/internal-releases/video-android/;publish=1',
            'maven.username': "${getBintrayUsername()}",
            'maven.password': "${getBintrayPassword()}"
    ]
}

task bintrayLibraryReleaseUpload(type: GradleBuild) {
    description = 'Publish Video Android AAR to release Bintray'
    group = 'Publishing'
    dependsOn checkoutRelease
    buildFile = file('library/build.gradle')
    tasks = ['clean', 'assemble', 'uploadArchives']
    def releaseVersion = System.getenv("RELEASE_VERSION") == null ?
            ("") :
            (System.getenv("RELEASE_VERSION"))
    boolean preRelease = releaseVersion.contains("preview") || releaseVersion.contains("beta")
    startParameter.projectProperties += gradle.startParameter.projectProperties + [
            'preRelease': preRelease,
            'maven.repo': 'https://api.bintray.com/maven/twilio/releases/video-android/;publish=1',
            'maven.username': "${getBintrayUsername()}",
            'maven.password': "${getBintrayPassword()}"
    ]
}
