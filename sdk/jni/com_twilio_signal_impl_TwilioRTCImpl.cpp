/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "TSCoreSDKTypes.h"
#include "TSCEndpoint.h"
#include "EndpointObserver.h"
#include "webrtc/video_engine/include/vie_base.h"
#include "webrtc/voice_engine/include/voe_base.h"
#include "webrtc/modules/video_capture/video_capture_internal.h"
#include "webrtc/modules/video_render/video_render_internal.h"

#include "com_twilio_signal_impl_TwilioRTCImpl.h"

using namespace twiliosdk;

/*
 * Class:     com_twilio_signal_impl_TwilioRTCImpl
 * Method:    initCore
 * Signature: (Landroid/content/Context;)Z
 */


JNIEXPORT jboolean JNICALL Java_com_twilio_signal_impl_TwilioRTCImpl_initCore(JNIEnv *env, jobject obj, jobject context) {

	bool failure = false;
	JavaVM * cachedJVM = NULL;

	env->GetJavaVM(&cachedJVM);
	TSCSDK* tscSdk = TSCSDK::instance();
	__android_log_print(ANDROID_LOG_VERBOSE, TAG, "SignalCore.initCore() called");
	LOG_W(TAG, "SignalCore.initCore() called");

	failure |= webrtc::SetCaptureAndroidVM(cachedJVM, context);
	failure |= webrtc::SetRenderAndroidVM(cachedJVM);

	LOG_W(TAG, "Calling DA Magic formula");
	failure |= webrtc::VoiceEngine::SetAndroidObjects(cachedJVM, env, context);

	if (tscSdk != NULL && tscSdk->isInitialized())
	{
		return JNI_TRUE;
	}

	return JNI_FALSE;
}


JNIEXPORT jlong JNICALL Java_com_twilio_signal_impl_TwilioRTCImpl_createEndpoint
  (JNIEnv *env, jobject obj, jstring token, jlong nativeEndpointObserver) {

	TSCOptions coreOptions;

	const char *tokenStr = env->GetStringUTFChars(token, 0);

	//__android_log_print(ANDROID_LOG_VERBOSE, TAG, "Capability token");
	coreOptions.insert(std::make_pair("capability-token", tokenStr));

	if (!nativeEndpointObserver)
	{
		__android_log_print(ANDROID_LOG_ERROR, TAG, "nativeEndpointObserver is null");
		return 0;
	}

	TSCEndpointObserverObjectRef eObserverRef =
			TSCEndpointObserverObjectRef(reinterpret_cast<TSCEndpointObserverObject*>(nativeEndpointObserver));

	//__android_log_print(ANDROID_LOG_VERBOSE, TAG, "eObserverPointer = %p", &eObserver);
	//__android_log_print(ANDROID_LOG_VERBOSE, TAG, "eObserverRef = %p", &eObserverRef);
	TSCEndpointObjectRef endpoint = TSCSDK::instance()->createEndpoint(coreOptions, eObserverRef);

	return (jlong) endpoint.release();
}

