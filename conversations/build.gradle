apply plugin: 'com.android.model.library'

def currentToolchainVersion = "4.9"

def twilioSdkHome = "/usr/local/twilio-sdk"

def coreHome = "${twilioSdkHome}/core/android"
/**
 * FIXME
 * This is dumb but we know we support armeabiv7a so we will set the headers directory
 * for each static library to this include directory. The header files should not change
 * across architectures.
 */
def coreHeaders = "${coreHome}/armeabiv7a/include"
def coreStaticLib = "lib/libtwilio-sdk-core-full.a"

def twilioCommonHome = "${twilioSdkHome}/twilio-common/android"
def twilioCommonHeaders = "${twilioCommonHome}/armeabiv7a/include"
def twilioCommonStaticLib = "lib/libtwilio-common.a"

def pocoHome = "${twilioSdkHome}/poco/android"
def pocoHeaders = "${pocoHome}/armeabiv7a/include"
def pocoCryptoHeaders = "${pocoHeaders}/Crypto"
def pocoFoundationStaticLib = "lib/libPocoFoundation.a"
def pocoNetStaticLib = "lib/libPocoNet.a"
def pocoCryptoStaticLib = "lib/libPocoCrypto.a"
def pocoNetSslStaticLib = "lib/libPocoNetSSL.a"
def pocoUtilStaticLib = "lib/libPocoUtil.a"
def pocoXmlStaticLib = "lib/libPocoXML.a"
def pocoJsonStaticLib = "lib/libPocoJSON.a"

def boringSslHome = "${twilioSdkHome}/boringssl/android"
def boringSslHeaders = "${boringSslHome}/armeabiv7a/include"
def boringSslStaticLib = "lib/libboringssl.a"

def webRtcHome = "${twilioSdkHome}/webrtc/android"
def webRtcHeaders = "${webRtcHome}/armeabiv7a/include"
def webRtcStaticLib = "lib/libwebrtc.a"
def webRtcJniStaticLib = "lib/libwebrtc-jni.a"

model {
    repositories {
        libs(PrebuiltLibraries) {
            twilioSdkCore {
                headers.srcDir "${coreHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def coreStaticLibPath = "${coreHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${coreStaticLib}"
                    staticLibraryFile = file("${coreStaticLibPath}")
                }
            }
            twilioCommon {
                headers.srcDir "${twilioCommonHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def twilioCommonStaticLibPath = "${twilioCommonHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${twilioCommonStaticLib}"
                    staticLibraryFile = file("${twilioCommonStaticLibPath}")
                }
            }
            pocoFoundation {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoFoundationStaticLibPath = "${pocoHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${pocoFoundationStaticLib}"
                    staticLibraryFile = file("${pocoFoundationStaticLibPath}")
                }
            }
            pocoNet {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoNetStaticLibPath = "${pocoHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${pocoNetStaticLib}"
                    staticLibraryFile = file("${pocoNetStaticLibPath}")
                }
            }
            pocoCrypto {
                headers.srcDir "${pocoCryptoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoCryptoStaticLibPath = "${pocoHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${pocoCryptoStaticLib}"
                    staticLibraryFile = file("${pocoCryptoStaticLibPath}")
                }
            }
            pocoNetSsl {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoNetSslStaticLibPath = "${pocoHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${pocoNetSslStaticLib}"
                    staticLibraryFile = file("${pocoNetSslStaticLibPath}")
                }
            }
            pocoUtil {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoUtilStaticLibPath = "${pocoHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${pocoUtilStaticLib}"
                    staticLibraryFile = file("${pocoUtilStaticLibPath}")
                }
            }
            pocoXml {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoXmlStaticLibPath = "${pocoHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${pocoXmlStaticLib}"
                    staticLibraryFile = file("${pocoXmlStaticLibPath}")
                }
            }
            pocoJson {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoJsonStaticLibPath = "${pocoHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${pocoJsonStaticLib}"
                    staticLibraryFile = file("${pocoJsonStaticLibPath}")
                }
            }
            boringssl {
                headers.srcDir "${boringSslHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def boringSslStaticLibPath = "${boringSslHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${boringSslStaticLib}"
                    staticLibraryFile = file("${boringSslStaticLibPath}")
                }
            }
            webrtc {
                headers.srcDir "${webRtcHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def webRtcStaticLibPath = "${webRtcHome}/" +
                            "${convertAbiToArch(targetPlatform.getName())}/${webRtcStaticLib}"
                    staticLibraryFile = file("${webRtcStaticLibPath}")
                }
            }
        }
    }

    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.2"

        defaultConfig.with {
            minSdkVersion.apiLevel 16 
            targetSdkVersion.apiLevel 23
            versionName generateVersionName()
            versionCode generateVersionCode()

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    }

    android.ndk {
        moduleName "jingle_peerconnection_so"
        toolchainVersion "${currentToolchainVersion}"
        platformVersion 16
        stl "c++_static"
        cppFlags.addAll([
                "-DWEBRTC_POSIX",
                "-DTWILIO_SDK_2_0",
                "-DWEBRTC_ANDROID",
                "-DWEBRTC_ANDROID_OPENSLES",
                "-DPOCO_ANDROID",
                "-DPJ_IS_BIG_ENDIAN=0",
                "-DPJ_IS_LITTLE_ENDIAN=1",
                "-Wall",
                "-std=gnu++11",
                "-fexceptions"
        ])
        ldLibs.addAll([
                "log",
                "z",
                "m",
                "dl",
                "GLESv2",
                "jnigraphics",
                "OpenSLES",
                "EGL",
                "GLESv1_CM",
                "android",
                // FIXME need to set this according to correct architecture!!
                "${pocoHome}/armeabiv7a/${pocoFoundationStaticLib}".toString(),
        ])

        /**
         * Several webrtc classes use native webrtc-jni objects that are only
         * called from Java classes. The compiler will incorrectly strip some
         * of these native webrtc-jni objects during linking because it believes
         * they are unused by the native library. Here we tell the linker to keep
         * the whole archive to prevent this stripping and then we specify in the
         * dependency after we are not using whole archive anymore because the linker
         * applies this option to every library after the option is specified.
         */
        // FIXME need to set this according to correct architecture!!
        ldFlags.addAll(["-Wl,--whole-archive,-l${webRtcHome}/armeabiv7a/${webRtcJniStaticLib}".toString(),
                       "-Wl,--no-whole-archive,-l${pocoHome}/armeabiv7a/${pocoCryptoStaticLib}".toString()
        ])

        abiFilters.addAll(["armeabi-v7a"])
    }

    android.sources {
        main {
            jni {
                exportedHeaders {
                    srcDir "src/main/jni"
                }
                dependencies {
                    library "twilioSdkCore" linkage "static"
                    library "twilioCommon" linkage "static"
                    library "pocoFoundation" linkage "static"
                    library "pocoNet" linkage "static"
                    library "pocoCrypto" linkage "static"
                    library "pocoNetSsl" linkage "static"
                    library "pocoUtil" linkage "static"
                    library "pocoXml" linkage "static"
                    library "pocoJson" linkage "static"
                    library "boringssl" linkage "static"
                    library "webrtc" linkage "static"
                }
            }
        }
    }

    android.buildTypes {
        debug {
            ndk {
                debuggable true
            }
        }
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    androidTestCompile 'com.android.support:support-annotations:23.1.1'
    androidTestCompile 'com.android.support.test:runner:0.4'
    androidTestCompile 'com.android.support.test:rules:0.4'

    // TODO this jar does not need to be behind an arch directory structure
    compile files("${twilioSdkHome}/webrtc/android/armeabiv7a/lib/libjingle_peerconnection_java.jar")
    compile 'com.twilio.sdk:twilio-common-android:0.1.17'
}

/**
 * Localize the JNI_OnLoad and JNI_OnUnLoad symbol in libwebrtc-jni.a to prevent conflicts with
 * initialization
 */
task localizeWebRtcJniLoadUnLoad(type: Exec, dependsOn: assemble) {
    def webRtcHomeNoArch = "${twilioSdkHome}/webrtc/android"
    def ndkDir = getNdkDir()
    def ndkToolchains = "${ndkDir}/toolchains"
    def toolchainMap = [
            "arm-linux-androideabi" : "arm-linux-androideabi",
            "aarch64-linux-android" : "aarch64-linux-android",
            "x86" : "i686-linux-android",
            "x86_64" : "x86_64-linux-android"
    ]
    def supportedArchs = [
            "armeabiv7a" : "arm-linux-androideabi",
            "arm64v8a" : "aarch64-linux-android",
            "x86" : "i686-linux-android",
            "x86_64" : "x86_64-linux-android"
    ]
    def supportedHosts = [
            "darwin",
            "linux"
    ]
    toolchainMap.each{ toolchainPrefix, toolChainPrebuiltPrefix ->
        supportedArchs.each { arch, archToolChain ->
            supportedHosts.each{ host ->
                def objCopy = "${ndkToolchains}/${toolchainPrefix}-${currentToolchainVersion}" +
                        "/prebuilt/${host}-x86_64/bin/${toolChainPrebuiltPrefix}-objcopy"
                def libWebRtcStaticLib = "${webRtcHomeNoArch}/${arch}/lib/libwebrtc-jni.a"

                if (file("${objCopy}").exists() &&
                        file("${libWebRtcStaticLib}").exists() &&
                        archToolChain == toolChainPrebuiltPrefix) {
                    exec {
                        executable "${objCopy}"
                        args '--localize-symbol',
                                'JNI_OnLoad',
                                "${libWebRtcStaticLib}"
                    }
                    exec {
                        executable "${objCopy}"
                        args '--localize-symbol',
                                'JNI_OnUnLoad',
                                "${libWebRtcStaticLib}"
                    }
                }
            }
        }
    }
}

def convertAbiToArch(abi) {
    return abi.replaceAll("-", "")
}

def getNdkDir() {
    return "$System.env.ANDROID_NDK_HOME"
}
