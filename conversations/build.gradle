apply plugin: 'com.android.model.library'
apply plugin: 'maven'

def currentToolchainVersion = "4.9"
// TODO add back ability for local builds
//def twilioSdkHome = "/usr/local/twilio-sdk"
def twilioSdkHome = "${buildDir}/prebuilt"
def supportedAbis = [
        "armeabi-v7a",
        "arm64-v8a",
        "x86",
        "x86_64"
]

def coreHome = "${twilioSdkHome}/twilio-conversations"
def coreHeaders = "${coreHome}/include"
def coreStaticLib = "libtwilio-conversations.a"

def twilioCommonHome = "${twilioSdkHome}/twilio-common"
def twilioCommonHeaders = "${twilioCommonHome}/include"
def twilioCommonStaticLib = "libtwilio-common.a"

def pocoHome = "${twilioSdkHome}/twilio-poco"
def pocoHeaders = "${pocoHome}/include"
def pocoCryptoHeaders = "${pocoHeaders}/Crypto"
def pocoFoundationStaticLib = "libPocoFoundation.a"
def pocoNetStaticLib = "libPocoNet.a"
def pocoCryptoStaticLib = "libPocoCrypto.a"
def pocoNetSslStaticLib = "libPocoNetSSL.a"
def pocoUtilStaticLib = "libPocoUtil.a"
def pocoXmlStaticLib = "libPocoXML.a"
def pocoJsonStaticLib = "libPocoJSON.a"

def boringSslHome = "${twilioSdkHome}/twilio-boringssl"
def boringSslHeaders = "${boringSslHome}/include"
def boringSslStaticLib = "libboringssl.a"

def webRtcHome = "${twilioSdkHome}/twilio-webrtc"
def webRtcHeaders = "${webRtcHome}/include"
def webRtcStaticLib = "libwebrtc.a"

configurations {
    preCompile
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            twilioSdkCore {
                headers.srcDir "${coreHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def coreStaticLibPath = "${coreHome}/lib/${buildType.getName()}/" +
                            "${targetPlatform.getName()}/${coreStaticLib}"
                    staticLibraryFile = file("${coreStaticLibPath}")
                }
            }
            twilioCommon {
                headers.srcDir "${twilioCommonHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def twilioCommonStaticLibPath = "${twilioCommonHome}/lib/" +
                            "${buildType.getName()}/" +
                            "${targetPlatform.getName()}/${twilioCommonStaticLib}"
                    staticLibraryFile = file("${twilioCommonStaticLibPath}")
                }
            }
            pocoFoundation {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoFoundationStaticLibPath = "${pocoHome}/lib/${buildType.getName()}/" +
                            "${targetPlatform.getName()}/${pocoFoundationStaticLib}"
                    staticLibraryFile = file("${pocoFoundationStaticLibPath}")
                }
            }
            pocoNet {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoNetStaticLibPath = "${pocoHome}/lib/${buildType.getName()}/" +
                            "${targetPlatform.getName()}/${pocoNetStaticLib}"
                    staticLibraryFile = file("${pocoNetStaticLibPath}")
                }
            }
            pocoCrypto {
                headers.srcDir "${pocoCryptoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoCryptoStaticLibPath = "${pocoHome}/lib/${buildType.getName()}/" +
                            "${targetPlatform.getName()}/${pocoCryptoStaticLib}"
                    staticLibraryFile = file("${pocoCryptoStaticLibPath}")
                }
            }
            pocoNetSsl {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoNetSslStaticLibPath = "${pocoHome}/lib/${buildType.getName()}/" +
                            "${targetPlatform.getName()}/${pocoNetSslStaticLib}"
                    staticLibraryFile = file("${pocoNetSslStaticLibPath}")
                }
            }
            pocoUtil {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoUtilStaticLibPath = "${pocoHome}/lib/${buildType.getName()}/" +
                            "${targetPlatform.getName()}/${pocoUtilStaticLib}"
                    staticLibraryFile = file("${pocoUtilStaticLibPath}")
                }
            }
            pocoXml {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoXmlStaticLibPath = "${pocoHome}/lib/${buildType.getName()}/" +
                            "${targetPlatform.getName()}/${pocoXmlStaticLib}"
                    staticLibraryFile = file("${pocoXmlStaticLibPath}")
                }
            }
            pocoJson {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoJsonStaticLibPath = "${pocoHome}/lib/${buildType.getName()}/" +
                            "${targetPlatform.getName()}/${pocoJsonStaticLib}"
                    staticLibraryFile = file("${pocoJsonStaticLibPath}")
                }
            }
            boringssl {
                headers.srcDir "${boringSslHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def boringSslStaticLibPath = "${boringSslHome}/lib/release/" +
                            "${targetPlatform.getName()}/${boringSslStaticLib}"
                    staticLibraryFile = file("${boringSslStaticLibPath}")
                }
            }
            webrtc {
                headers.srcDir "${webRtcHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def webRtcStaticLibPath = "${webRtcHome}/lib/release/" +
                            "${targetPlatform.getName()}/${webRtcStaticLib}"
                    staticLibraryFile = file("${webRtcStaticLibPath}")
                }
            }
        }
    }

    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.3"

        defaultConfig.with {
            minSdkVersion.apiLevel 16
            targetSdkVersion.apiLevel 23
            versionName generateVersionName()
            versionCode generateVersionCode()

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        testOptions.unitTests.all {
            ignoreFailures false

            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    android.ndk {
        moduleName "jingle_peerconnection_so"
        toolchainVersion "${currentToolchainVersion}"
        platformVersion 21
        stl "c++_static"
        cppFlags.addAll([
                "-DWEBRTC_POSIX",
                "-DTWILIO_SDK_2_0",
                "-DWEBRTC_ANDROID",
                "-DWEBRTC_ANDROID_OPENSLES",
                "-DPOCO_ANDROID",
                "-Wall",
                "-std=gnu++11",
                "-fexceptions"
        ])
        ldLibs.addAll([
                "log",
                "z",
                "m",
                "dl",
                "GLESv2",
                "jnigraphics",
                "OpenSLES",
                "EGL",
                "GLESv1_CM",
                "android"
        ])
        abiFilters.addAll(supportedAbis)
    }

    android.sources {
        main {
            jni {
                exportedHeaders {
                    srcDir "src/main/jni"
                }
                dependencies {
                    library "twilioSdkCore" linkage "static"
                    library "twilioCommon" linkage "static"
                    library "pocoFoundation" linkage "static"
                    library "pocoNet" linkage "static"
                    library "pocoCrypto" linkage "static"
                    library "pocoNetSsl" linkage "static"
                    library "pocoUtil" linkage "static"
                    library "pocoXml" linkage "static"
                    library "pocoJson" linkage "static"
                    library "boringssl" linkage "static"
                    library "webrtc" linkage "static"
                }
            }
        }
    }

    android.buildTypes {
        debug {
            ndk {
                debuggable true
            }
        }
        release {
            minifyEnabled false
        }
    }

    tasks {
        /**
         * Here we create a javadoc tasks that depends on the
         * the current android model configuration
         */
        createJavadocs(Javadoc) {
            def androidConfig = $.android
            def androidJar = "${getSdkDir()}/platforms/${androidConfig.compileSdkVersion}/" +
            "android.jar"

            source = androidConfig.sources.main.java.source
            classpath += project.files(androidJar);
            options.links("http://docs.oracle.com/javase/7/docs/api/");
            options.linksOffline("http://d.android.com/reference", "${getSdkDir()}/docs/reference");
            options.footer("<script>(function(i,s,o,g,r,a,m){i[\"GoogleAnalyticsObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,\"script\",\"https://www.google-analytics.com/analytics.js\",\"ga\");ga(\"create\", \"UA-2900316-33\", \"auto\");ga(\"send\", \"pageview\");</script>");
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            exclude 'com/twilio/conversations/internal/*'
            exclude 'com/twilio/conversations/impl/*'
            failOnError false
        }
    }
}

dependencies {
    preCompile 'org.pocoproject.twilio:twilio-poco:1.6.16:android@tar.bz2'
    preCompile 'com.googlesource.boringssl.twilio:twilio-boringssl:1.0.13:android@tar.bz2'
    preCompile 'com.twilio.sdk:twilio-common:0.1.15:android@tar.bz2'
    preCompile 'com.twilio.sdk:twilio-webrtc:50.1:android@tar.bz2'
    preCompile 'com.twilio.sdk:twilio-conversations:0.11.1:android@tar.bz2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    androidTestCompile 'com.squareup.retrofit:retrofit:1.9.0'
    androidTestCompile 'com.android.support:support-annotations:23.1.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.4'
    androidTestCompile 'com.android.support.test:rules:0.4'
    androidTestCompile 'com.google.code.gson:gson:2.6.2'

    compile 'com.twilio.sdk:twilio-common-android:0.5.0-rc1'
    // TODO this really should be on nexus as a jar and not local
    compile files("${twilioSdkHome}/twilio-webrtc/lib/release/libjingle_peerconnection_java.jar")
}

/**
 * Iterates over conversations dependencies and ensures they are downloaded
 */
task unpackPrebuilts(type: Copy) {
    def target = file("${buildDir}/prebuilt")

    onlyIf { !target.exists() }

    configurations.preCompile.each { dependency ->
        from tarTree(dependency)
        into target
    }
}

/**
 * Will unzip release aar so we can transform accordingly
 */
task unpackReleaseAar(type: Copy, dependsOn: 'assembleRelease') {
    def aarFile = file("${buildDir}/outputs/aar/conversations-release.aar")
    def outputDir = file("${buildDir}/unpacked/conversations")

    from zipTree(aarFile)
    into outputDir
}

/**
 * Dives into the unpacked aar and creates a directory structure for a fat jar
 */
task prepareReleaseJar(type: Copy, dependsOn: 'unpackReleaseAar') {
    def classesJar = file("${buildDir}/unpacked/conversations/classes.jar")
    def libjingleJar = file("${buildDir}/unpacked/conversations/libs/libjingle_peerconnection_java.jar")
    def jniLibs = file("${buildDir}/unpacked/conversations/jni")
    def jarHome = file("${buildDir}/intermediates/jar")

    from zipTree(classesJar)
    include '**/*.class'
    include '**/*.java'

    from zipTree(libjingleJar)
    include '**/*.class'
    include '**/*.java'

    into jarHome
    into('lib') {
        from fileTree(jniLibs)
        include '**/*.so'
    }
}

/**
 * Create a jar from the release jar intermediate directory
 */
task createReleaseJar(type: Jar, dependsOn: 'prepareReleaseJar') {
    def jarHome = file("${buildDir}/intermediates/jar")

    archiveName = "twilio-conversations-android.jar"
    destinationDir = file("${buildDir}/outputs/jar")
    from jarHome
}

/**
 * Aggragates the quickstart app, javadoc, and release jar into
 * intermediate directory for packaging. Note that the jars will be suffixed with
 * the current version
 */
task prepareReleaseTarBz2(type: Copy, dependsOn: 'createReleaseJar') {
    def quickstart = file("../quickstart")
    def javadocHome = file("${buildDir}/docs/javadoc")
    def jarHome = file("${buildDir}/outputs/jar/twilio-conversations-android.jar")
    def tarHome = file("${buildDir}/intermediates/tar")

    into tarHome
    into('javadoc') {
        from javadocHome
    }
    into('quickstart') {
        from quickstart
    }
    into('quickstart/app/libs') {
        from jarHome
        rename { String fileName ->
            fileName.replace('twilio-conversations-android.jar',
                    "twilio-conversations-android-${getVersionName()}.jar")
        }
    }
    into('libs') {
        from jarHome
        rename { String fileName ->
            fileName.replace('twilio-conversations-android.jar',
                    "twilio-conversations-android-${getVersionName()}.jar")
        }
    }
}

/**
 * Creates the tarbz2 file from the intermediate directory
 */
task createReleaseTarBz2(type: Tar, dependsOn: 'prepareReleaseTarBz2') {
    from fileTree(file("${buildDir}/intermediates/tar"))
    baseName = 'twilio-conversations-android'
    destinationDir = file("${buildDir}/outputs/tar")
    extension = 'tar.bz2'
    compression = Compression.BZIP2
}

/**
 * Generates the current javadocs, assembles the project as release, and packages
 * artifacts into tar
 */
task packageRelease(type: GradleBuild){
    tasks = ['createJavadocs', 'createReleaseTarBz2']
}

/**
 * Maven upload configuration that can be used for any maven repo
 *
 */
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${mavenRepo};publish=1") {
                authentication(
                        userName: mavenUsername,
                        password: mavenPassword
                )
            }
            pom.version = getVersionName() + ((project.hasProperty("releaseCandidate") &&
                    project.property("releaseCandidate").toBoolean() == true) ?
                    "-rc${project.property("versionRc")}" :
                    '')
            pom.groupId = 'com.twilio'
            pom.artifactId = 'conversations-android'
            pom.packaging = 'aar'
        }
    }
}

/**
 * Localize the JNI_OnLoad and JNI_OnUnLoad symbol in libwebrtc-jni.a to prevent conflicts with
 * initialization
 */
task localizeWebRtcJniLoadUnLoad(type: Exec, dependsOn: 'unpackPrebuilts') {
    def ndkDir = getNdkDir()
    def ndkToolchains = "${ndkDir}/toolchains"
    def toolchainMap = [
            "arm-linux-androideabi" : "arm-linux-androideabi",
            "aarch64-linux-android" : "aarch64-linux-android",
            "x86" : "i686-linux-android",
            "x86_64" : "x86_64-linux-android"
    ]
    def supportedArchs = [
            "armeabi-v7a" : "arm-linux-androideabi",
            "arm64-v8a" : "aarch64-linux-android",
            "x86" : "i686-linux-android",
            "x86_64" : "x86_64-linux-android"
    ]
    def supportedHosts = [
            "darwin",
            "linux"
    ]

    // For some reason I have to have something set for
    // command line in order for this task to not complain just ignore this
    // the real work follows in the loops below
    commandLine 'true'
    doLast {
        toolchainMap.each { toolchainPrefix, toolChainPrebuiltPrefix ->
            supportedArchs.each { arch, archToolChain ->
                supportedHosts.each { host ->
                    def objCopy = "${ndkToolchains}/${toolchainPrefix}-${currentToolchainVersion}" +
                            "/prebuilt/${host}-x86_64/bin/${toolChainPrebuiltPrefix}-objcopy"
                    def libWebRtcStaticLib = "${webRtcHome}/lib/release/${arch}/libwebrtc-jni.a"
                    if (file("${objCopy}").exists() &&
                            file("${libWebRtcStaticLib}").exists() &&
                            archToolChain == toolChainPrebuiltPrefix) {
                        exec {
                            executable "${objCopy}"
                            args '--localize-symbol',
                                    'JNI_OnLoad',
                                    "${libWebRtcStaticLib}"
                        }
                        exec {
                            executable "${objCopy}"
                            args '--localize-symbol',
                                    'JNI_OnUnLoad',
                                    "${libWebRtcStaticLib}"
                        }
                    }
                }
            }
        }
    }
}

def getSdkDir() {
    // Checking environment variable for sdk home first
    def sdkHome = System.env.ANDROID_SDK_HOME

    // Android Studio does not see this environment but will generate a
    // local.properties file with the ndk path set
    if (sdkHome == null) {
        println "Could not locate NDK home in environment variable. Trying local.properties"
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        sdkHome = properties.getProperty('sdk.dir')
    }

    // Fail the build for no sdk detected
    assert sdkHome != null : "Could not find Android SDK!"

    return sdkHome
}

def getNdkDir() {
    // Checking environment variable for ndk home first
    def ndkHome = System.env.ANDROID_NDK_HOME

    // Android Studio does not see this environment but will generate a
    // local.properties file with the ndk path set
    if (ndkHome == null) {
        println "Could not locate NDK home in environment variable. Trying local.properties"
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        ndkHome = properties.getProperty('ndk.dir')
    }

    // Fail the build for no ndk detected
    assert ndkHome != null : "Could not find Android NDK!"

    return ndkHome
}

/**
 * TODO move to separate file
 *
 * Set of rules to ensure that tasks and flags are set correctly
 */
class ConversationsRuleSource extends RuleSource {
    static final def projectDir = new File("conversations").absolutePath
    // TODO Add back ability to do local builds
//    static final def twilioSdkHome = "/usr/local/twilio-sdk"
    static final def twilioSdkHome = "${projectDir}/build/prebuilt"
    static final def pocoFoundationStaticLib = "libPocoFoundation.a"
    static final def pocoCryptoStaticLib = "libPocoCrypto.a"
    static final def webRtcJniStaticLib = "libwebrtc-jni.a"

    @Mutate
    void validatePreCompileDebugEnvironmentArmeabiV7a(
            @Path('tasks.compileJingle_peerconnection_soArmeabi-v7aDebugSharedLibraryJingle_peerconnection_soMainCpp')
                    Task compileTask) {
        validatePreCompileEnvironment(compileTask)
    }

    @Mutate
    void validatePreCompileReleaseEnvironmentArmeabiV7a(
            @Path('tasks.compileJingle_peerconnection_soArmeabi-v7aReleaseSharedLibraryJingle_peerconnection_soMainCpp')
                    Task compileTask) {
        validatePreCompileEnvironment(compileTask)
    }

    @Mutate
    void validatePreCompileDebugEnvironmentArm64V8a(
            @Path('tasks.compileJingle_peerconnection_soArm64-v8aDebugSharedLibraryJingle_peerconnection_soMainCpp')
                    Task compileTask) {
        validatePreCompileEnvironment(compileTask)
    }

    @Mutate
    void validatePreCompileReleaseEnvironmentArm64V8a(
            @Path('tasks.compileJingle_peerconnection_soArm64-v8aReleaseSharedLibraryJingle_peerconnection_soMainCpp')
                    Task compileTask) {
        validatePreCompileEnvironment(compileTask)
    }

    @Mutate
    void validatePreCompileDebugEnvironmentX86(
            @Path('tasks.compileJingle_peerconnection_soX86DebugSharedLibraryJingle_peerconnection_soMainCpp')
                    Task compileTask) {
        validatePreCompileEnvironment(compileTask)
    }

    @Mutate
    void validatePreCompileReleaseEnvironmentX86(
            @Path('tasks.compileJingle_peerconnection_soX86ReleaseSharedLibraryJingle_peerconnection_soMainCpp')
                    Task compileTask) {
        validatePreCompileEnvironment(compileTask)
    }

    @Mutate
    void validatePreCompileDebugEnvironmentX86_64(
            @Path('tasks.compileJingle_peerconnection_soX86_64DebugSharedLibraryJingle_peerconnection_soMainCpp')
                    Task compileTask) {
        validatePreCompileEnvironment(compileTask)
    }

    @Mutate
    void validatePreCompileReleaseEnvironmentX86_64(
            @Path('tasks.compileJingle_peerconnection_soX86_64ReleaseSharedLibraryJingle_peerconnection_soMainCpp')
                    Task compileTask) {
        validatePreCompileEnvironment(compileTask)
    }

    @Mutate
    void injectArmeabiV7aDebugLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soArmeabi-v7aDebugSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'armeabi-v7a', 'debug')
    }

    @Mutate
    void injectArmeabiV7aReleaseLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soArmeabi-v7aReleaseSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'armeabi-v7a', 'release')
    }

    @Mutate
    void injectArm64v8aDebugLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soArm64-v8aDebugSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'arm64-v8a', 'debug')
    }

    @Mutate
    void injectArm64v8aReleaseLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soArm64-v8aReleaseSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'arm64-v8a', 'release')
    }

    @Mutate
    void injectX86DebugLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soX86DebugSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'x86', 'debug')
    }

    @Mutate
    void injectX86ReleaseLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soX86ReleaseSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'x86', 'release')
    }

    @Mutate
    void injectX86_64DebugLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soX86_64DebugSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'x86_64', 'debug')
    }

    @Mutate
    void injectX86_64ReleaseLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soX86_64ReleaseSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'x86_64', 'release')
    }

    private void validatePreCompileEnvironment(compileTask) {
        compileTask.dependsOn("localizeWebRtcJniLoadUnLoad")
    }

    private void injectLinkerFlags(linkTask, sdkHome, arch, buildType) {
        def pocoHome = "${sdkHome}/twilio-poco/lib/${buildType}"
        def webRtcHome = "${sdkHome}/twilio-webrtc/lib/release"

        linkTask.doFirst {
            if (arch.equals('arm64-v8a')) {
                properties["linkerArgs"].add("-fuse-ld=gold")
            }
            properties["linkerArgs"].addAll([
                    "-l${pocoHome}/${arch}/${pocoFoundationStaticLib}".toString(),
                    "-l${pocoHome}/${arch}/${pocoCryptoStaticLib}".toString(),

                    /**
                     * Several webrtc classes use native webrtc-jni objects that are only
                     * called from Java classes. The compiler will incorrectly strip some
                     * of these native webrtc-jni objects during linking because it believes
                     * they are unused by the native library. Here we tell the linker to keep
                     * the whole archive to prevent this stripping and then we specify in the
                     * dependency after we are not using whole archive anymore because the linker
                     * applies this option to every library after the option is specified.
                     */
                    "-Wl,--whole-archive,-l${webRtcHome}/${arch}/${webRtcJniStaticLib},"
                            .toString() + "--no-whole-archive"
            ])
        }
    }
}
apply plugin: ConversationsRuleSource
