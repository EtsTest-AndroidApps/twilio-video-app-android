apply plugin: 'com.android.model.library'

def currentToolchainVersion = "4.9"

def twilioSdkHome = "/usr/local/twilio-sdk"

// TODO use targetPlatform
// def coreHome = "${twilioSdkHome}/core/android/${targetPlatform.getName()}"
def coreHome = "${twilioSdkHome}/core/android/armeabiv7a"
def coreHeaders = "${coreHome}/include"
def coreStaticLib = "${coreHome}/lib/libtwilio-sdk-core-full.a"

// TODO use targetPlatform
// def twilioCommonHome = "${twilioSdkHome}/twilio-common/android/${targetPlatform.getName()}"
def twilioCommonHome = "${twilioSdkHome}/twilio-common/android/armeabiv7a"
def twilioCommonHeaders = "${twilioCommonHome}/include"
def twilioCommonStaticLib = "${twilioCommonHome}/lib/libtwilio-common.a"

// TODO use targetPlatform
// def pocoFoundationHome = "${twilioSdkHome}/poco/android/${targetPlatform.getName()}"
def pocoHome = "${twilioSdkHome}/poco/android/armeabiv7a"
def pocoHeaders = "${pocoHome}/include"
def pocoCryptoHeaders = "${pocoHeaders}/Crypto"
def pocoFoundationStaticLib = "${pocoHome}/lib/libPocoFoundation.a"
def pocoNetStaticLib = "${pocoHome}/lib/libPocoNet.a"
def pocoCryptoStaticLib = "${pocoHome}/lib/libPocoCrypto.a"
def pocoNetSslStaticLib = "${pocoHome}/lib/libPocoNetSSL.a"
def pocoUtilStaticLib = "${pocoHome}/lib/libPocoUtil.a"
def pocoXmlStaticLib = "${pocoHome}/lib/libPocoXML.a"
def pocoJsonStaticLib = "${pocoHome}/lib/libPocoJSON.a"

// TODO use targetPlatform
// def boringSslHome = "${twilioSdkHome}/poco/android/${targetPlatform.getName()}"
def boringSslHome = "${twilioSdkHome}/boringssl/android/armeabiv7a"
def boringSslHeaders = "${boringSslHome}/include"
def boringSslStaticLib = "${boringSslHome}/lib/libboringssl.a"

// TODO use targetPlatform
// def webRtcHome = "${twilioSdkHome}/poco/android/${targetPlatform.getName()}"
def webRtcHome = "${twilioSdkHome}/webrtc/android/armeabiv7a"
def webRtcHeaders = "${webRtcHome}/include"
def webRtcStaticLib = "${webRtcHome}/lib/libwebrtc.a"
def webRtcJniStaticLib = "${webRtcHome}/lib/libwebrtc-jni.a"

model {
    repositories {
        libs(PrebuiltLibraries) {
            twilioSdkCore {
                headers.srcDir "${coreHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${coreStaticLib}")
                }
            }
            twilioCommon {
                headers.srcDir "${twilioCommonHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${twilioCommonStaticLib}")
                }
            }
            pocoFoundation {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${pocoFoundationStaticLib}")
                }
            }
            pocoNet {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${pocoNetStaticLib}")
                }
            }
            pocoCrypto {
                headers.srcDir "${pocoCryptoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${pocoCryptoStaticLib}")
                }
            }
            pocoNetSsl {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${pocoNetSslStaticLib}")
                }
            }
            pocoUtil {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${pocoUtilStaticLib}")
                }
            }
            pocoXml {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${pocoXmlStaticLib}")
                }
            }
            pocoJson {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${pocoJsonStaticLib}")
                }
            }
            boringssl {
                headers.srcDir "${boringSslHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${boringSslStaticLib}")
                }
            }
            webrtc {
                headers.srcDir "${webRtcHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${webRtcStaticLib}")
                }
            }
        }
    }

    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.2"

        defaultConfig.with {
            minSdkVersion.apiLevel 16 
            targetSdkVersion.apiLevel 23
            versionName generateVersionName()
            versionCode generateVersionCode()

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    }

    android.ndk {
        moduleName "jingle_peerconnection_so"
        toolchainVersion "${currentToolchainVersion}"
        platformVersion 16
        stl "c++_static"
        cppFlags.addAll([
                "-DWEBRTC_POSIX",
                "-DTWILIO_SDK_2_0",
                "-DWEBRTC_ANDROID",
                "-DWEBRTC_ANDROID_OPENSLES",
                "-DPOCO_ANDROID",
                "-DPJ_IS_BIG_ENDIAN=0",
                "-DPJ_IS_LITTLE_ENDIAN=1",
                "-Wall",
                "-std=gnu++11",
                "-fexceptions"
        ])
        ldLibs.addAll([
                "log",
                "z",
                "m",
                "dl",
                "GLESv2",
                "jnigraphics",
                "OpenSLES",
                "EGL",
                "GLESv1_CM",
                "android",
                "${pocoFoundationStaticLib}".toString()
        ])

        /**
         * Several webrtc classes use native webrtc-jni objects that are only
         * called from Java classes. The compiler will incorrectly strip some
         * of these native webrtc-jni objects during linking because it believes
         * they are unused by the native library. Here we tell the linker to keep
         * the whole archive to prevent this stripping and then we specify in the
         * dependency after we are not using whole archive anymore because the linker
         * applies this option to every library after the option is specified.
         */
        ldFlags.addAll(["-Wl,--whole-archive,-l${webRtcJniStaticLib}".toString(),
                       "-Wl,--no-whole-archive,-l${pocoCryptoStaticLib}".toString()
        ])

        abiFilters.addAll(["armeabi-v7a"])
    }

    android.sources {
        main {
            jni {
                exportedHeaders {
                    srcDir "src/main/jni"
                }
                dependencies {
                    library "twilioSdkCore" linkage "static"
                    library "twilioCommon" linkage "static"
                    library "pocoFoundation" linkage "static"
                    library "pocoNet" linkage "static"
                    library "pocoCrypto" linkage "static"
                    library "pocoNetSsl" linkage "static"
                    library "pocoUtil" linkage "static"
                    library "pocoXml" linkage "static"
                    library "pocoJson" linkage "static"
                    library "boringssl" linkage "static"
                    library "webrtc" linkage "static"
                }
            }
        }
    }

    android.buildTypes {
        debug {
            ndk {
                debuggable true
            }
        }
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    androidTestCompile 'com.android.support:support-annotations:23.1.1'
    androidTestCompile 'com.android.support.test:runner:0.4'
    androidTestCompile 'com.android.support.test:rules:0.4'

    // TODO this jar does not need to be behind an arch directory structure
    compile files("${twilioSdkHome}/webrtc/android/armeabiv7a/lib/libjingle_peerconnection_java.jar")
    compile 'com.twilio.sdk:twilio-common-android:0.1.17'
}

task localizeWebRtcJniLoadUnLoad(type: Exec, dependsOn: assemble) {
    def webRtcHomeNoArch = "${twilioSdkHome}/webrtc/android"
    def ndkDir = getNdkDir()
    def ndkToolchains = "${ndkDir}/toolchains"
    def toolchainMap = [
            "arm-linux-androideabi" : "arm-linux-androideabi",
            "aarch64-linux-android" : "aarch64-linux-android",
            "x86" : "i686-linux-android",
            "x86_64" : "x86_64-linux-android"
    ]
    def supportedArchs = [
            "armeabiv7a" : "arm-linux-androideabi",
            "arm64v8a" : "aarch64-linux-android",
            "x86" : "i686-linux-android",
            "x86_64" : "x86_64-linux-android"
    ]
    def supportedHosts = [
            "darwin",
            "linux"
    ]
    toolchainMap.each{ toolchainPrefix, toolChainPrebuiltPrefix ->
        supportedArchs.each { arch, archToolChain ->
            supportedHosts.each{ host ->
                def objCopy = "${ndkToolchains}/${toolchainPrefix}-${currentToolchainVersion}" +
                        "/prebuilt/${host}-x86_64/bin/${toolChainPrebuiltPrefix}-objcopy"
                def libWebRtcStaticLib = "${webRtcHomeNoArch}/${arch}/lib/libwebrtc-jni.a"

                if (file("${objCopy}").exists() &&
                        file("${libWebRtcStaticLib}").exists() &&
                        archToolChain == toolChainPrebuiltPrefix) {
                    exec {
                        executable "${objCopy}"
                        args '--localize-symbol',
                                'JNI_OnLoad',
                                "${libWebRtcStaticLib}"
                    }
                    exec {
                        executable "${objCopy}"
                        args '--localize-symbol',
                                'JNI_OnUnLoad',
                                "${libWebRtcStaticLib}"
                    }
                }
            }
        }
    }
}

def getNdkDir() {
    return "$System.env.ANDROID_NDK_HOME"
}
