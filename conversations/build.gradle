apply plugin: 'com.android.model.library'
apply plugin: 'nebula.provided-base'

def currentToolchainVersion = "4.9"
// TODO add back ability for local builds
//def twilioSdkHome = "/usr/local/twilio-sdk"
def twilioSdkHome = "${buildDir}/prebuilt"
def supportedAbis = [
        "armeabi-v7a",
//        "arm64-v8a",
        "x86",
//        "x86_64"
]

def coreHome = "${twilioSdkHome}/twilio-conversations"
def coreHeaders = "${coreHome}/include"
def coreStaticLib = "libtwilio-conversations.a"

def twilioCommonHome = "${twilioSdkHome}/twilio-common"
def twilioCommonHeaders = "${twilioCommonHome}/include"
def twilioCommonStaticLib = "libtwilio-common.a"

def pocoHome = "${twilioSdkHome}/twilio-poco"
def pocoHeaders = "${pocoHome}/include"
def pocoCryptoHeaders = "${pocoHeaders}/Crypto"
def pocoFoundationStaticLib = "libPocoFoundation.a"
def pocoNetStaticLib = "libPocoNet.a"
def pocoCryptoStaticLib = "libPocoCrypto.a"
def pocoNetSslStaticLib = "libPocoNetSSL.a"
def pocoUtilStaticLib = "libPocoUtil.a"
def pocoXmlStaticLib = "libPocoXML.a"
def pocoJsonStaticLib = "libPocoJSON.a"

def boringSslHome = "${twilioSdkHome}/twilio-boringssl"
def boringSslHeaders = "${boringSslHome}/include"
def boringSslStaticLib = "libboringssl.a"

def webRtcHome = "${twilioSdkHome}/twilio-webrtc"
def webRtcHeaders = "${webRtcHome}/include"
def webRtcStaticLib = "libwebrtc.a"

configurations {
    provided
    preCompile
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            twilioSdkCore {
                headers.srcDir "${coreHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def coreStaticLibPath = "${coreHome}/lib/release/" +
                            "${targetPlatform.getName()}/${coreStaticLib}"
                    staticLibraryFile = file("${coreStaticLibPath}")
                }
            }
            twilioCommon {
                headers.srcDir "${twilioCommonHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def twilioCommonStaticLibPath = "${twilioCommonHome}/lib/release/" +
                            "${targetPlatform.getName()}/${twilioCommonStaticLib}"
                    staticLibraryFile = file("${twilioCommonStaticLibPath}")
                }
            }
            pocoFoundation {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoFoundationStaticLibPath = "${pocoHome}/lib/release/" +
                            "${targetPlatform.getName()}/${pocoFoundationStaticLib}"
                    staticLibraryFile = file("${pocoFoundationStaticLibPath}")
                }
            }
            pocoNet {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoNetStaticLibPath = "${pocoHome}/lib/release/" +
                            "${targetPlatform.getName()}/${pocoNetStaticLib}"
                    staticLibraryFile = file("${pocoNetStaticLibPath}")
                }
            }
            pocoCrypto {
                headers.srcDir "${pocoCryptoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoCryptoStaticLibPath = "${pocoHome}/lib/release/" +
                            "${targetPlatform.getName()}/${pocoCryptoStaticLib}"
                    staticLibraryFile = file("${pocoCryptoStaticLibPath}")
                }
            }
            pocoNetSsl {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoNetSslStaticLibPath = "${pocoHome}/lib/release/" +
                            "${targetPlatform.getName()}/${pocoNetSslStaticLib}"
                    staticLibraryFile = file("${pocoNetSslStaticLibPath}")
                }
            }
            pocoUtil {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoUtilStaticLibPath = "${pocoHome}/lib/release/" +
                            "${targetPlatform.getName()}/${pocoUtilStaticLib}"
                    staticLibraryFile = file("${pocoUtilStaticLibPath}")
                }
            }
            pocoXml {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoXmlStaticLibPath = "${pocoHome}/lib/release/" +
                            "${targetPlatform.getName()}/${pocoXmlStaticLib}"
                    staticLibraryFile = file("${pocoXmlStaticLibPath}")
                }
            }
            pocoJson {
                headers.srcDir "${pocoHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def pocoJsonStaticLibPath = "${pocoHome}/lib/release/" +
                            "${targetPlatform.getName()}/${pocoJsonStaticLib}"
                    staticLibraryFile = file("${pocoJsonStaticLibPath}")
                }
            }
            boringssl {
                headers.srcDir "${boringSslHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def boringSslStaticLibPath = "${boringSslHome}/lib/release/" +
                            "${targetPlatform.getName()}/${boringSslStaticLib}"
                    staticLibraryFile = file("${boringSslStaticLibPath}")
                }
            }
            webrtc {
                headers.srcDir "${webRtcHeaders}"
                binaries.withType(StaticLibraryBinary) {
                    def webRtcStaticLibPath = "${webRtcHome}/lib/release/" +
                            "${targetPlatform.getName()}/${webRtcStaticLib}"
                    staticLibraryFile = file("${webRtcStaticLibPath}")
                }
            }
        }
    }

    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.2"

        defaultConfig.with {
            minSdkVersion.apiLevel 16
            targetSdkVersion.apiLevel 23
            versionName generateVersionName()
            versionCode generateVersionCode()

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    }

    android.ndk {
        moduleName "jingle_peerconnection_so"
        toolchainVersion "${currentToolchainVersion}"
        platformVersion 16
        stl "c++_static"
        cppFlags.addAll([
                "-DWEBRTC_POSIX",
                "-DTWILIO_SDK_2_0",
                "-DWEBRTC_ANDROID",
                "-DWEBRTC_ANDROID_OPENSLES",
                "-DPOCO_ANDROID",
                "-DPJ_IS_BIG_ENDIAN=0",
                "-DPJ_IS_LITTLE_ENDIAN=1",
                "-Wall",
                "-std=gnu++11",
                "-fexceptions"
        ])
        ldLibs.addAll([
                "log",
                "z",
                "m",
                "dl",
                "GLESv2",
                "jnigraphics",
                "OpenSLES",
                "EGL",
                "GLESv1_CM",
                "android"
        ])
        abiFilters.addAll(supportedAbis)
    }

    android.sources {
        main {
            jni {
                exportedHeaders {
                    srcDir "src/main/jni"
                }
                dependencies {
                    library "twilioSdkCore" linkage "static"
                    library "twilioCommon" linkage "static"
                    library "pocoFoundation" linkage "static"
                    library "pocoNet" linkage "static"
                    library "pocoCrypto" linkage "static"
                    library "pocoNetSsl" linkage "static"
                    library "pocoUtil" linkage "static"
                    library "pocoXml" linkage "static"
                    library "pocoJson" linkage "static"
                    library "boringssl" linkage "static"
                    library "webrtc" linkage "static"
                }
            }
        }
    }

    android.buildTypes {
        debug {
            ndk {
                debuggable true
            }
        }
        release {
            minifyEnabled false
        }
    }

    tasks {
        /**
         * Here we create a javadoc tasks that depeonds on the
         * the current android model configuration
         */
        createJavadocs(Javadoc) {
            def androidConfig = $.android
            def androidJar = "${getSdkDir()}/platforms/${androidConfig.compileSdkVersion}/" +
            "android.jar"

            source = androidConfig.sources.main.java.source
            classpath += project.files(androidJar);
            options.links("http://docs.oracle.com/javase/7/docs/api/");
            options.links("http://d.android.com/reference/");
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }
    }
}

dependencies {
    preCompile 'org.pocoproject.twilio:twilio-poco:1.6.12:android@tar.bz2'
    preCompile 'com.googlesource.boringssl.twilio:twilio-boringssl:1.0.11:android@tar.bz2'
    preCompile 'com.twilio.sdk:twilio-common:0.1.11:android@tar.bz2'
    preCompile 'com.twilio.sdk:twilio-webrtc:48.3:android@tar.bz2'
    preCompile 'com.twilio.sdk:twilio-conversations:0.10.10:android@tar.bz2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    androidTestCompile 'com.squareup.retrofit:retrofit:1.9.0'
    androidTestCompile 'com.android.support:support-annotations:23.1.1'
    androidTestCompile 'com.android.support.test:runner:0.4'
    androidTestCompile 'com.android.support.test:rules:0.4'

    // TODO this really should be on nexus as a jar and not local
    compile files("${twilioSdkHome}/twilio-webrtc/lib/release/libjingle_peerconnection_java.jar")
    provided 'com.twilio.sdk:twilio-common-android:0.2.0'
}

/**
 * Iterates over conversations dependencies and ensures they are downloaded
 */
task unpackPrebuilts(type: Copy) {
    def target = file("${buildDir}/prebuilt")
    onlyIf { !target.exists() }

    configurations.preCompile.each { dependency ->
        from tarTree(dependency)
        into target
    }
}

/**
 * Will unzip release aar so we can transform accordingly
 */
task unpackReleaseAar(type: Copy, dependsOn: 'assembleRelease') {
    def aarFile = file("${buildDir}/outputs/aar/conversations-release.aar")
    def outputDir = file("${buildDir}/unpacked/conversations")

    from zipTree(aarFile)
    into outputDir
}

/**
 * Dives into the unpacked aar and creates a directory structure for a fat jar
 */
task prepareReleaseJar(type: Copy, dependsOn: 'unpackReleaseAar') {
    def classesJar = file("${buildDir}/unpacked/conversations/classes.jar")
    def libjingleJar = file("${buildDir}/unpacked/conversations/libs/libjingle_peerconnection_java.jar")
    def jniLibs = file("${buildDir}/unpacked/conversations/jni")
    def jarHome = file("${buildDir}/intermediates/jar")

    from zipTree(classesJar)
    include '**/*.class'
    include '**/*.java'

    from zipTree(libjingleJar)
    include '**/*.class'
    include '**/*.java'

    into jarHome
    into('lib') {
        from fileTree(jniLibs)
        include '**/*.so'
    }
}

/**
 * Create a jar from the release jar intermediate directory
 */
task createReleaseJar(type: Jar, dependsOn: 'prepareReleaseJar') {
    def jarHome = file("${buildDir}/intermediates/jar")

    archiveName = "twilio-conversations-android.jar"
    destinationDir = file("${buildDir}/outputs/jar")
    from jarHome
}

/**
 * Aggragates the quickstart app, javadoc, and release jar into
 * intermediate directory for packaging. Note that the jars will be suffixed with
 * the current version
 */
task prepareReleaseTarBz2(type: Copy, dependsOn: 'createReleaseJar') {
    def quickstart = file("../quickstart")
    def javadocHome = file("${buildDir}/docs/javadoc")
    def jarHome = file("${buildDir}/outputs/jar/twilio-conversations-android.jar")
    def tarHome = file("${buildDir}/intermediates/tar")

    into tarHome
    into('javadoc') {
        from javadocHome
    }
    into('quickstart') {
        from quickstart
    }
    into('quickstart/app/libs') {
        from jarHome
        rename { String fileName ->
            fileName.replace('twilio-conversations-android.jar',
                    "twilio-conversations-android-${getVersionName()}.jar")
        }
    }
    into('libs') {
        from jarHome
        rename { String fileName ->
            fileName.replace('twilio-conversations-android.jar',
                    "twilio-conversations-android-${getVersionName()}.jar")
        }
    }
}

/**
 * Creates the tarbz2 file from the intermediate directory
 */
task createReleaseTarBz2(type: Tar, dependsOn: 'prepareReleaseTarBz2') {
    from fileTree(file("${buildDir}/intermediates/tar"))
    baseName = 'twilio-conversations-android'
    destinationDir = file("${buildDir}/outputs/tar")
    extension = 'tar.bz2'
    compression = Compression.BZIP2
}

/**
 * Generates the current javadocs, assembles the project as release, and packages
 * artifacts into tar
 */
task packageRelease(type: GradleBuild){
    tasks = ['createJavadocs', 'createReleaseTarBz2']
}

/**
 * Localize the JNI_OnLoad and JNI_OnUnLoad symbol in libwebrtc-jni.a to prevent conflicts with
 * initialization
 */
task localizeWebRtcJniLoadUnLoad(type: Exec, dependsOn: assemble) {
    def ndkDir = getNdkDir()
    def ndkToolchains = "${ndkDir}/toolchains"
    def toolchainMap = [
            "arm-linux-androideabi" : "arm-linux-androideabi",
            "aarch64-linux-android" : "aarch64-linux-android",
            "x86" : "i686-linux-android",
            "x86_64" : "x86_64-linux-android"
    ]
    def supportedArchs = [
            "armeabi-v7a" : "arm-linux-androideabi",
            "arm64-v8a" : "aarch64-linux-android",
            "x86" : "i686-linux-android",
            "x86_64" : "x86_64-linux-android"
    ]
    def supportedHosts = [
            "darwin",
            "linux"
    ]
    toolchainMap.each{ toolchainPrefix, toolChainPrebuiltPrefix ->
        supportedArchs.each { arch, archToolChain ->
            supportedHosts.each{ host ->
                def objCopy = "${ndkToolchains}/${toolchainPrefix}-${currentToolchainVersion}" +
                        "/prebuilt/${host}-x86_64/bin/${toolChainPrebuiltPrefix}-objcopy"
                def libWebRtcStaticLib = "${webRtcHome}/lib/release/${arch}/libwebrtc-jni.a"
                if (file("${objCopy}").exists() &&
                        file("${libWebRtcStaticLib}").exists() &&
                        archToolChain == toolChainPrebuiltPrefix) {
                    exec {
                        executable "${objCopy}"
                        args '--localize-symbol',
                                'JNI_OnLoad',
                                "${libWebRtcStaticLib}"
                    }
                    exec {
                        executable "${objCopy}"
                        args '--localize-symbol',
                                'JNI_OnUnLoad',
                                "${libWebRtcStaticLib}"
                    }
                }
            }
        }
    }
}

def getSdkDir() {
    // Checking environment variable for sdk home first
    def sdkHome = System.env.ANDROID_SDK_HOME

    // Android Studio does not see this environment but will generate a
    // local.properties file with the ndk path set
    if (sdkHome == null) {
        println "Could not locate NDK home in environment variable. Trying local.properties"
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        sdkHome = properties.getProperty('sdk.dir')
    }

    // Fail the build for no sdk detected
    assert sdkHome != null : "Could not find Android SDK!"

    return sdkHome
}

def getNdkDir() {
    // Checking environment variable for ndk home first
    def ndkHome = System.env.ANDROID_NDK_HOME

    // Android Studio does not see this environment but will generate a
    // local.properties file with the ndk path set
    if (ndkHome == null) {
        println "Could not locate NDK home in environment variable. Trying local.properties"
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        ndkHome = properties.getProperty('ndk.dir')
    }

    // Fail the build for no ndk detected
    assert ndkHome != null : "Could not find Android NDK!"

    return ndkHome
}

/**
 * Mangles linker flags so we can get this puppy to compile and run
 * for all archs and all build types. It's about to get real.
 */
class LinkerFlagsRuleSource extends RuleSource {
    static final def projectDir = new File("conversations").absolutePath
    // TODO Add back ability to do local builds
//    static final def twilioSdkHome = "/usr/local/twilio-sdk"
    static final def twilioSdkHome = "${projectDir}/build/prebuilt"
    static final def pocoFoundationStaticLib = "libPocoFoundation.a"
    static final def pocoCryptoStaticLib = "libPocoCrypto.a"
    static final def webRtcJniStaticLib = "libwebrtc-jni.a"

    @Mutate
    void injectArmeabiV7aDebugLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soArmeabi-v7aDebugSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'armeabi-v7a')
    }

    @Mutate
    void injectArmeabiV7aReleaseLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soArmeabi-v7aReleaseSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'armeabi-v7a')
    }

    /**
     * Currently the plugin does not generate link tasks for 64 bit architectures. A bug
     * has been filed and once resolved we can uncomment
     *
     * https://code.google.com/p/android/issues/detail?id=201561
     */
//    @Mutate
//    void injectArm64v8aDebugLinkerFlags(
//            @Path('tasks.linkJingle_peerconnection_soArm64-v8aDebugSharedLibrary')
//                    Task linkTask) {
//        injectLinkerFlags(linkTask, twilioSdkHome, 'arm64-v8a')
//    }
//
//    @Mutate
//    void injectArm64v8aReleaseLinkerFlags(
//            @Path('tasks.linkJingle_peerconnection_soArm64-v8aReleaseSharedLibrary')
//                    Task linkTask) {
//        injectLinkerFlags(linkTask, twilioSdkHome, 'arm64-v8a')
//    }

    @Mutate
    void injectX86DebugLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soX86DebugSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'x86')
    }

    @Mutate
    void injectX86ReleaseLinkerFlags(
            @Path('tasks.linkJingle_peerconnection_soX86ReleaseSharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, twilioSdkHome, 'x86')
    }

//    @Mutate
//    void injectX86_64DebugLinkerFlags(
//            @Path('tasks.linkJingle_peerconnection_soX86_64DebugSharedLibrary')
//                    Task linkTask) {
//        injectLinkerFlags(linkTask, twilioSdkHome, 'x86_64')
//    }
//
//    @Mutate
//    void injectX86_64ReleaseLinkerFlags(
//            @Path('tasks.linkJingle_peerconnection_soX86_64ReleaseSharedLibrary')
//                    Task linkTask) {
//        injectLinkerFlags(linkTask, twilioSdkHome, 'x86_64')
//    }

    private void injectLinkerFlags(linkTask, sdkHome, arch) {
        def pocoHome = "${sdkHome}/twilio-poco/lib/release"
        def webRtcHome = "${sdkHome}/twilio-webrtc/lib/release"

        linkTask.doFirst {
            properties["linkerArgs"].addAll([
                    "-l${pocoHome}/${arch}/${pocoFoundationStaticLib}".toString(),
                    "-l${pocoHome}/${arch}/${pocoCryptoStaticLib}".toString(),

                    /**
                     * Several webrtc classes use native webrtc-jni objects that are only
                     * called from Java classes. The compiler will incorrectly strip some
                     * of these native webrtc-jni objects during linking because it believes
                     * they are unused by the native library. Here we tell the linker to keep
                     * the whole archive to prevent this stripping and then we specify in the
                     * dependency after we are not using whole archive anymore because the linker
                     * applies this option to every library after the option is specified.
                     */
                    "-Wl,--whole-archive,-l${webRtcHome}/${arch}/${webRtcJniStaticLib},"
                            .toString() + "--no-whole-archive"
            ])
        }
    }
}

apply plugin: LinkerFlagsRuleSource
